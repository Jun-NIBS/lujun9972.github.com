#+TITLE: linux如何更改网卡MAC地址
#+AUTHOR: lujun9972
#+TAGS: linux和它的小伙伴,network
#+DATE: [2018-06-01 五 16:57]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* 查看网卡MAC地址
使用ip命令就能查看MAC地址了:
#+BEGIN_SRC shell :var interface="enp0s25" :results org
  ip link show ${interface}
#+END_SRC

#+BEGIN_SRC org
2: enp0s25: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000
    link/ether f0:de:f1:ad:1d:f0 brd ff:ff:ff:ff:ff:ff
#+END_SRC


其中 =link/ether= 后面那一串用 =:= 分割的6字节十六进制数就是网卡的MAC地址了，也就是 =f0:de:f1:ad:1d:f0=

* 手工修改MAC地址
使用ip命令也能修改MAC地址，但是需要root权限：

1. 禁用网卡
   #+BEGIN_SRC shell  :var interface="enp0s25" :results org :dir /sudo::
     sudo ip link set dev ${interface} down
   #+END_SRC

2. 修改MAC地址
   
   有的网络运营商可能会拒绝为不正确的 MAC 分配 IP 地址,因此推荐前三个字节用真实的MAC地址前缀，后三个字节可以随机更改。
   #+BEGIN_SRC shell  :var interface="enp0s25" new_mac="f0:de:f1:ff:ff:ff" :results org :dir /sudo:: 
     sudo ip link set dev ${interface} address ${new_mac}
   #+END_SRC

   我们再查看一下网卡的MAC地址
   #+BEGIN_SRC shell :var interface="enp0s25" :results org
     ip link show ${interface}
   #+END_SRC

   #+BEGIN_SRC org
   2: enp0s25: <BROADCAST,MULTICAST> mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000
       link/ether f0:de:f1:ff:ff:ff brd ff:ff:ff:ff:ff:ff
   #+END_SRC
   
   你会发现网卡已经被改成新的MAC地址了.

3. 最后重启网卡
   #+BEGIN_SRC shell  :var interface="enp0s25" :results org :dir /sudo::
     sudo ip link set dev ${interface} up
   #+END_SRC

* 自动更改
systemd-networkd服务能通过 =link= 文件(底层物理网络设备配置)来设置MAC地址

我们通过 =[Match]= 小节来匹配某个网卡，然后通过 =[Link]= 小节来对网卡进行配置

** Match小节
如果 "[Match]" 小节中的每一项都与某个网卡匹配， 那么视为该Link文件与该网卡匹配。若 "[Match]" 小节为空则表示匹配任意网卡。 

所有可用于匹配的选项如下：

+ MACAddress :: 匹配网卡的物理地址(MAC地址)
+ OriginalName :: 匹配网卡的"INTERFACE"属性值(网卡的内核名称)。 接收一个空格分隔的匹配模式列表(使用shell风格的通配符)。 不可用于匹配已经被用户空间改了名字的网卡。 应该小心使用此选项， 因为网卡的内核名称有可能是不稳定的。 
+ Path :: 匹配网卡的 "ID_PATH" 属性值(网卡的总线路径)。 接收一个空格分隔的匹配模式列表(使用shell风格的通配符)。 
+ Driver :: 匹配网卡的 "DRIVER" 属性值(网卡的驱动名称)。 接收一个空格分隔的匹配模式列表(使用shell风格的通配符)。 注意，如果网卡的 "DRIVER" 属性不存在， 那么将使用 "ethtool -i" 命令中输出的驱动名称。
+ Type :: 匹配网卡的 "DEVTYPE" 属性值(网卡的设备类型)。 接收一个空格分隔的匹配模式列表(使用shell风格的通配符)。 
+ Host :: 匹配主机的 hostname 或"machine ID"，参见 systemd.unit(5) 中的 "ConditionHost=" 选项。 
+ Virtualization :: 检查是否运行于特定的虚拟环境中， 参见 systemd.unit(5) 中的 "ConditionVirtualization=" 选项。 
+ KernelCommandLine :: 检查是否设置了(或者以"!"开头表示未设置)特定的内核引导选项， 参见 systemd.unit(5) 中的 "ConditionKernelCommandLine=" 选项。 
+ Architecture :: 检查是否运行于特定的硬件平台， 参见 systemd.unit(5) 中的 "ConditionArchitecture=" 选项。 
                  
** Link小节
Link小节可以对网卡进行多种配置，其中与修改MAC有关的选项有：

+ MACAddressPolicy :: 应该如何设置网卡的MAC地址：

  - "persistent" :: 如果内核使用了网卡硬件固有的MAC地址(绝大多数网卡都有)， 那么啥也不做，直接使用内核的MAC地址。 否则，将会随机新生成一个 确保在多次启动之间保持固定不变的MAC地址(针对给定的主板与网卡)。 自动生成MAC地址的特性 要求网卡必须存在 ID_NET_NAME_* 属性， 否则无法自动生成MAC地址。 

  - "random" :: 如果内核使用了随机生成的MAC地址(而不是网卡硬件固有的MAC地址)， 那么啥也不做，直接使用内核的MAC地址。 否则，将在网卡每次出现的时候(一般在启动过程中)随机新生成一个MAC地址。 无论使用上述哪种方式生成的MAC地址， 都将设置 "unicast" 与 "locally administered" 位。

  - "none" :: 无条件的直接使用内核的MAC地址。

+ MACAddress :: 在未设置 "MACAddressPolicy=" 时所使用MAC地址。

                
另外，Link小节中，我们必须为某个网卡进行命名，因此肯定会有 =NamePolicy= 或者 =Name= 选项

+ NamePolicy :: 应该如何设置网卡的名称， 仅在未使用 "net.ifnames=0" 内核引导选项时有意义。 接受一个空格分隔的策略列表， 顺序尝试每个策略，并以第一个成功的策略为准。 所得的名字将被用于设置网卡的 "ID_NET_NAME" 属性。 注意，默认的udev规则会用 "ID_NET_NAME" 的值设置 "NAME" 属性(也就是网卡的名称)。 如果网卡已经被空户空间命名，那么将不会进行任何重命名操作。 可用的策略如下：

  - "kernel" :: 如果内核已经为此网卡设置了固定的可预测名称， 那么不进行任何重命名操作。 

  - "database" :: 基于网卡的 "ID_NET_NAME_FROM_DATABASE" 属性值(来自于udev硬件数据库)设置网卡的名称。 

  - "onboard" :: 基于网卡的 "ID_NET_NAME_ONBOARD" 属性值(来自于板载网卡固件)设置网卡的名称。 

  - "slot" :: 基于网卡的 "ID_NET_NAME_SLOT" 属性值(来自于可插拔网卡固件)设置网卡的名称。 

  - "path" :: 基于网卡的 "ID_NET_NAME_PATH" 属性值(来自于网卡的总线位置)设置网卡的名称。

  - "mac" :: 基于网卡的 "ID_NET_NAME_MAC" 属性值(来自于网卡的固定MAC地址)设置网卡的名称。

+ Name :: 在 NamePolicy= 无效时应该使用的网卡名称。 无效的情况包括： (1)未设置 NamePolicy= ； (2)NamePolicy= 中的策略全失败； (3)使用了"net.ifnames=0"内核引导选项

          注意， 千万不要设置可能被内核用于其他网口的名称(例如 "eth0")， 这可能会导致 udev 在分配名称时与内核产生竞争， 从而导致不可预期的后果。 最好的做法是使用一些永远不会导致冲突名称或前缀，例如： "internal0"/"external0" 或 "lan0"/"lan1"/"lan3" 
