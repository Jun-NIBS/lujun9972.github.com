#+TITLE: meminfo文件详解
#+AUTHOR: lujun9972
#+TAGS: linux和它的小伙伴
#+DATE: [2018-04-17 二 10:01]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

我们可以从 =/proc/meminfo= 中查看内核使用内存情况的各种信息。

一个 =/proc/meminfo= 的内容看起来是这样的：
#+BEGIN_SRC shell :results org
  cat /proc/meminfo |nl
#+END_SRC

#+BEGIN_SRC org
     1	MemTotal:        3814108 kB
     2	MemFree:          111908 kB
     3	MemAvailable:     394844 kB
     4	Buffers:           22976 kB
     5	Cached:           291436 kB
     6	SwapCached:        15480 kB
     7	Active:          1634948 kB
     8	Inactive:         784896 kB
     9	Active(anon):    1487400 kB
    10	Inactive(anon):   474008 kB
    11	Active(file):     147548 kB
    12	Inactive(file):   310888 kB
    13	Unevictable:           0 kB
    14	Mlocked:               0 kB
    15	SwapTotal:       8388604 kB
    16	SwapFree:        8238844 kB
    17	Dirty:             22280 kB
    18	Writeback:             0 kB
    19	AnonPages:       2103892 kB
    20	Mapped:          1262612 kB
    21	Shmem:             81684 kB
    22	Slab:              99048 kB
    23	SReclaimable:      53432 kB
    24	SUnreclaim:        45616 kB
    25	KernelStack:        8352 kB
    26	PageTables:        24152 kB
    27	NFS_Unstable:          0 kB
    28	Bounce:                0 kB
    29	WritebackTmp:          0 kB
    30	CommitLimit:    10295656 kB
    31	Committed_AS:    6235812 kB
    32	VmallocTotal:   34359738367 kB
    33	VmallocUsed:           0 kB
    34	VmallocChunk:          0 kB
    35	HardwareCorrupted:     0 kB
    36	AnonHugePages:         0 kB
    37	ShmemHugePages:        0 kB
    38	ShmemPmdMapped:        0 kB
    39	HugePages_Total:       0
    40	HugePages_Free:        0
    41	HugePages_Rsvd:        0
    42	HugePages_Surp:        0
    43	Hugepagesize:       2048 kB
    44	DirectMap4k:      106112 kB
    45	DirectMap2M:     3858432 kB
#+END_SRC

可以看出，这里的内核信息特别多，有些含义很难理解。

下面就来尝试解释一下这些行的意义：

* MemTotal:        3814108 kB
总共安装的物理内存容量
* MemFree:          110008 kB
当前空闲的内存量
* MemAvailable:      60948 kB
* Buffers:            3324 kB / Cached:           147476 kB
buffers + cached的值就是可以使用的磁盘告诉缓存的大小。

buffers + cached = Active(file) + Inactive(file) + Shmem

* SwapCached:       114852 kB
* Active:           978684 kB
等于Active(anon) + Active(file)的和
* Inactive:         357080 kB
等于Inactive(anon) + Inactive(file)的和
* Active(anon):     927568 kB / Inactive(anon):   321440 kB / Active(file):      51116 kB / Inactive(file):    35640 kB
括号中为anon的内存为匿名内存，括号中为file的内存为file-backed内存，这两个内存的区别在于，物理内存的内容是否与物理磁盘上的文件相关联。

其中，匿名内存就是进程中堆上分配的内存，是用malloc分配的内存。

而file-backed内存为磁盘高速缓存的内存空间和“文件映射(将物理磁盘上的文件内容与用户进程的逻辑地址直接关联)”的内存空间，其中的内容与物理磁盘上的文件相对应。

而Active和Inactive的区别在于内存空间中是否包含最近被使用过的数据。当物理内存不足，不得不释放正在使用的内存空间时，会优先释放Inactive的内存空间。

Linux内核中使用4类LRU表来分别记录对应的这4类内存页,内存页一般以4K为一页。
* Unevictable:          32 kB
有些内存页是不能被释放的，这些内存页不能放在LRU表中，而是记录到Unevictable标中
* Mlocked:              32 kB

* SwapTotal:       8388604 kB
* SwapFree:        7211516 kB
* Dirty:                40 kB
* Writeback:             0 kB
* AnonPages:       1164512 kB
Linux内核中存在一个rmap(reverse mapping)机制，负责管理匿名内存中每一个物理内存页映射到哪个进程的哪个逻辑地址这样的信息。
这个rmap中记录的内存页总和就是AnonPages的值。

* Mapped:          2244604 kB
* Shmem:             66852 kB
tmpfs所使用的内存.

tmpfs即利用物理内存来提供RAM磁盘的功能。在tmpfs上保存文件时，文件系统会暂时将它们保存到磁盘高速缓存上，因此它是属于磁盘高速缓存对应的"buffers+cached"一类。
但是由于磁盘上并没有与之对应的内容，因此它并记录在File-backed内存对应的LRU列表上，而是记录在匿名内存的LRU表上。
这就是 =buffers + cached = Active(file) + Inactive(file) + Shmem= 公式的由来


* Slab:             107728 kB

由"Slab分配器"分配的总量。Slab分配器针对一些经常分配并释放的对象(如进程描述符)统计各种数据类型的汇总信息，然后为每种数据类型创建多个由多个内存页组成的Slab(这些Slab组成一个Slab列表)。
再在Slab内部划分成一个个相应数据类型的对象。

当内核要使用某种类型的数据结构时，就从对应的slab列表中分配一个对象出去，而当要释放时，将其重新保存在Slab列表中，从而避免内存碎片。

当可供使用的对象不足时，会使用空闲的内存页来创建并添加新的Slab到对应对象的Slab列表中。
相反，若Slab中所有对象都被内核回收，即所有对象都未使用时，根据需要也可以回收Slab，释放成空闲内存。

从 =/proc/slabinfo= 中我们可以查看每个Slab的信息：

#+BEGIN_SRC shell :results org :dir /sudo::
  sudo cat /proc/slabinfo |head
#+END_SRC

#+BEGIN_SRC org
slabinfo - version: 2.1
# name            <active_objs> <num_objs> <objsize> <objperslab> <pagesperslab> : tunables <limit> <batchcount> <sharedfactor> : slabdata <active_slabs> <num_slabs> <sharedavail>
nf_conntrack          27     72    320   12    1 : tunables    0    0    0 : slabdata      6      6      0
ovl_inode             46     46    688   23    4 : tunables    0    0    0 : slabdata      2      2      0
fuse_request          40     40    400   20    2 : tunables    0    0    0 : slabdata      2      2      0
fuse_inode            19     19    832   19    4 : tunables    0    0    0 : slabdata      1      1      0
xfs_dqtrx              0      0    528   15    2 : tunables    0    0    0 : slabdata      0      0      0
xfs_rui_item           0      0    672   12    2 : tunables    0    0    0 : slabdata      0      0      0
xfs_rud_item           0      0    152   26    1 : tunables    0    0    0 : slabdata      0      0      0
xfs_ili             4486   4488    168   24    1 : tunables    0    0    0 : slabdata    187    187      0
#+END_SRC

其中：

+ name :: 对象名称
+ active_objs :: 处于活跃状态的对象个数
+ num_objs :: slab列表中的总对象数量
+ objperslab :: 一个slab中包含的对象个数
+ pageperslab :: 每个slab占用的内存页数
+ num_slabs :: slab列表中slab的个数
+ active_slabs :: 处于活跃状态的slab个数

* SReclaimable:      50604 kB
不存在活跃对象，可以回收的Slab容量
* SUnreclaim:        57124 kB
对象处于活跃状态，不能被回收的Slab容量
* KernelStack:        8704 kB
* PageTables:        28720 kB
* NFS_Unstable:          0 kB
* Bounce:                0 kB
* WritebackTmp:          0 kB
* CommitLimit:    10295656 kB
* Committed_AS:    7566728 kB
* VmallocTotal:   34359738367 kB
* VmallocUsed:           0 kB
* VmallocChunk:          0 kB
* HardwareCorrupted:     0 kB
* AnonHugePages:         0 kB
* ShmemHugePages:        0 kB
* ShmemPmdMapped:        0 kB
* HugePages_Total:       0
* HugePages_Free:        0
* HugePages_Rsvd:        0
* HugePages_Surp:        0
* Hugepagesize:       2048 kB
* DirectMap4k:      290432 kB
* DirectMap2M:     3674112 kB

