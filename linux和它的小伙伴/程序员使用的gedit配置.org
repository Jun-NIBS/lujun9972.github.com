#+TITLE: 程序员使用的gedit配置
#+AUTHOR: lujun9972
#+TAGS: linux和它的小伙伴
#+DATE: [2018-04-23 一 16:57]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Gedit是一个简单的文本编辑器，但是通过一些配置，再加上它的一些插件，可以让Gedit部分具有IDE的能力。

* 配置
在首选项中可以对gedit做一些配置

1. 查看标签页下选中：

   + 显示行号

   + 现实状态栏

   + 突出显示当前行

   + 突出显示匹配的括号

2. 在插件标签页下选中

   + Code Assistance

   + 代码注视

   + 单词补全

   + 括号补全

   + 片段

   + 外部工具

   + 文件浏览器面板

   + 智能空格

* 管理片段
"片段"插件可以让你快速生成代码。比如在C语言中写入for循环，你只需要输入  =for<TAB>=, gedit会自动帮你生成for循环的框架
[[file:./images/screenshot-43.png]]

"片段"插件预先定义了很多代码片段的模板，但是你也可以按照自己的需求来自定义自己的代码片段。

你只需要点击菜单中的 =管理片段=, 会弹出一个 "管理片段" 的窗口，是这样的
[[file:./images/screenshot-44.png]]

点击左下角的 =+= 号就能新建一个片段了，输入片段名称后，在右下角的 “Tab触发器”中填入触发扩展为片段的字符串。
表示输入该字符串再按<TAB>后，就会将该字符串替换成代码片段了。

然后在右上方输入想要扩展成的代码片段。在其中可以使用 =${N}= (其中N为1,2,3...)来表示占位符，即扩展代码片段后光标先跳到 =${1}= 的位置，等待你输入这个地方的值，然后按下<TAB>光标就会跳转到 =${2}= 的地方，如此继续下去。

而 =$0= 比较特殊，当光标跳转到 =$0= 位置时，表示退出代码扩展模式。

我们还可以为占位符增加默认值，语法为 =${N:默认值}=, 这样代码扩展时会先使用默认值替代占位符的位置，并等待用户的修改，若无需修改，则可以直接按<TAB>跳到下一个占位符的位置处(可以看看 for loop的写法，很容易明白)。

更变态的是，我们还可以写一段程序来生成默认值，语法为 =$<N:python代码>=. 比如
#+BEGIN_EXAMPLE
  $<3: import datetime; return str(datetime.date.today().year)>
#+END_EXAMPLE
表示3号占位符的默认值为当前日期所属的年份。


* 管理外置工具
你还可以自定义一些有用的外置工具，点击"配置"->"管理外置工具"，就能看到"管理外部工具"的窗口

[[file:./images/screenshot-45.png]]

点击左下角的 =+= 号可以新增自己的外部工具。

右下脚的 =快捷方式= 表示出发该工具的快捷方式。

=保存= 表示运行该脚本时是否需要保存文档，是保存当前文档还是所有打开的文档

=输入= 则定义传送给脚本的参数包含哪些内容

=输出= 则定义脚本输出的位置

=使用范围= 则定义了符合哪些条件的文件可以使用该外部工具。

而左上角的框中，填入的则是要执行的脚本的内容。脚本不局限于shell，只需要设置好 =#!= 的内容，理论上任何脚本语言都支持的。

其中一个比较常用的功能就是 =在此处打开终端=, 会以当前文件的目录为工作目录打开一个终端，不过默认的脚本使用 =gnome-terminator= 来打开的，而我一般使用 =urxvt= 来作为终端仿真软件。因此这里我把其中的脚本修改为了
#+BEGIN_SRC shell
  urxvt -cd "$GEDIT_CURRENT_DOCUMENT_DIR" &
#+END_SRC

该命令最后的 =&= 表示后台运行该命令，即不会卡死gedit本身。

要调用外部工具有两种方法：

一种是通过设置的 =快捷方式= 来触发。

还有一种是通过鼠标点击来触发，步骤为 "工具"->"外部工具"->选择要触发的外部工具脚本
[[file:./images/screenshot-46.png]]
