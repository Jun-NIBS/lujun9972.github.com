#+TITLE: 使用urlliib.parse库解析url
#+AUTHOR: lujun9972
#+TAGS: 编程之旅,python,url
#+DATE: [2018-02-22 四 20:51]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
#+PROPERTY: header-args    :results output :results org :session urllib.parse


python中的urllib.parse module提供了很多解析和组建URL的函数。

* 解析url
=urlparse()= 函数可以将url解析成 =ParseResult= 对象. 对象中包含了六个元素,分别为：

+ 协议(scheme)
+ 域名(netloc)
+ 路径(path)
+ 路径参数(params)
+ 查询参数(query)
+ 片段(fragment)

#+BEGIN_SRC python 
  from urllib.parse import urlparse

  url='http://user:pwd@domain:80/path;params?query=queryarg#fragment'

  parsed_result=urlparse(url)

  print('parsed_result包含了',len(parsed_result),'个元素')
  print(parsed_result)
#+END_SRC

结果为:
#+BEGIN_SRC org
parsed_result包含了 6 个元素
ParseResult(scheme='http', netloc='user:pwd@domain:80', path='/path', params='params', query='query=queryarg', fragment='fragment')
#+END_SRC

=ParseResult= 继承于 =namedtuple=, 因此既可以同时通过索引和命名属性来获取URL中各部分的值

为了方便起见， =ParseResult= 还提供了 =username=, =password=, =hostname=, =port= 对 =netloc= 进一步进行拆分。
#+BEGIN_SRC python
  print('scheme  :', parsed_result.scheme)
  print('netloc  :', parsed_result.netloc)
  print('path    :', parsed_result.path)
  print('params  :', parsed_result.params)
  print('query   :', parsed_result.query)
  print('fragment:', parsed_result.fragment)
  print('username:', parsed_result.username)
  print('password:', parsed_result.password)
  print('hostname:', parsed_result.hostname)
  print('port    :', parsed_result.port)
#+END_SRC

结果为:
#+BEGIN_SRC org
scheme  : http
netloc  : user:pwd@domain:80
path    : /path
params  : params
query   : query=queryarg
fragment: fragment
username: user
password: pwd
hostname: domain
port    : 80
#+END_SRC

除了 =urlparse()= 之外，还有一个类似的 =urlsplit()= 函数也能对URL进行拆分，所不同的是， =urlsplit()= 并不会把 =路径参数(params)= 从 =路径(path)= 中分离出来。

当URL中path部分包含多个参数时，使用 =urlparse()= 解析是有问题的

#+BEGIN_SRC python
  url='http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg#fragment'

  parsed_result=urlparse(url)

  print(parsed_result)
  print('parsed.path    :', parsed_result.path)
  print('parsed.params  :', parsed_result.params)
#+END_SRC

结果为:
#+BEGIN_SRC org
ParseResult(scheme='http', netloc='user:pwd@domain:80', path='/path1;params1/path2', params='params2', query='query=queryarg', fragment='fragment')
parsed.path    : /path1;params1/path2
parsed.params  : params2
#+END_SRC

这时可以使用 =urlsplit()= 来解析
#+BEGIN_SRC python
  from urllib.parse import urlsplit
  split_result=urlsplit(url)

  print(split_result)
  print('split.path    :', split_result.path)
  # SplitResult 没有params属性
#+END_SRC

结果为:
#+BEGIN_SRC org
SplitResult(scheme='http', netloc='user:pwd@domain:80', path='/path1;params1/path2;params2', query='query=queryarg', fragment='fragment')
split.path    : /path1;params1/path2;params2
#+END_SRC

若只是要将URL后的fragment标识拆分出来，可以使用 =urldefrag()= 函数
#+BEGIN_SRC python
  from urllib.parse import urldefrag

  url = 'http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg#fragment'

  d = urldefrag(url)
  print(d)
  print('url     :', d.url)
  print('fragment:', d.fragment)
#+END_SRC

结果为:
#+BEGIN_SRC org
DefragResult(url='http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg', fragment='fragment')
url     : http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg
fragment: fragment
#+END_SRC

* 组建URL
ParsedResult对象和SplitResult对象都有一个 =geturl()= 方法，可以返回一个完整的URL字符串
#+BEGIN_SRC python
  print(parsed_result.geturl())
  print(split_result.geturl())
#+END_SRC

结果为:
#+BEGIN_SRC org
http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg#fragment
http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg#fragment
#+END_SRC

但是 =geturl()= 只在ParsedResult和SplitResult对象中有，若想将一个普通的元组组成URL，则需要使用 =urlunparse()= 函数
#+BEGIN_SRC python
  from urllib.parse import urlunparse
  url_compos = ('http', 'user:pwd@domain:80', '/path1;params1/path2', 'params2', 'query=queryarg', 'fragment')
  print(urlunparse(url_compos))
#+END_SRC

结果为:
#+BEGIN_SRC org
http://user:pwd@domain:80/path1;params1/path2;params2?query=queryarg#fragment
#+END_SRC

* 相对路径转换绝对路径
除此之外，urllib.parse 还提供了一个 =urljoin()= 函数，来将相对路径转换成绝对路径的URL
#+BEGIN_SRC python
  from urllib.parse import urljoin

  print(urljoin('http://www.example.com/path/file.html', 'anotherfile.html'))
  print(urljoin('http://www.example.com/path/', 'anotherfile.html'))
  print(urljoin('http://www.example.com/path/file.html', '../anotherfile.html'))
  print(urljoin('http://www.example.com/path/file.html', '/anotherfile.html'))
#+END_SRC

结果为:
#+BEGIN_SRC org
http://www.example.com/path/anotherfile.html
http://www.example.com/path/anotherfile.html
http://www.example.com/anotherfile.html
http://www.example.com/anotherfile.html
#+END_SRC

* 查询参数的构造和解析
使用 =urlencode()= 函数可以将一个dict转换成合法的查询参数:
#+BEGIN_SRC python
  from urllib.parse import urlencode

  query_args = {
      'name': 'dark sun',
      'country': '中国'
  }

  query_args = urlencode(query_args)
  print(query_args)
#+END_SRC

结果为:
#+BEGIN_SRC org
name=dark+sun&country=%E4%B8%AD%E5%9B%BD
#+END_SRC

可以看到特殊字符也被正确地转义了。

相对的，可以使用 =parse_qs()= 来将查询参数解析成dict
#+BEGIN_SRC python
  from urllib.parse import parse_qs
  print(parse_qs(query_args))
#+END_SRC

结果为:
#+BEGIN_SRC org
{'name': ['dark sun'], 'country': ['中国']}
#+END_SRC

如果只是希望对特殊字符进行转义，那么可以使用 =quote= 或 =quote_plus= 函数,其中 =quote_plus= 比 =quote= 更激进一些，会把 =:/= 一类的符号也给转义了
#+BEGIN_SRC python
  from urllib.parse import quote, quote_plus, urlencode

  url = 'http://localhost:1080/~hello!/'
  print('urlencode :', urlencode({'url': url}))
  print('quote     :', quote(url))
  print('quote_plus:', quote_plus(url))
#+END_SRC

结果为:
#+BEGIN_SRC org
urlencode : url=http%3A%2F%2Flocalhost%3A1080%2F%7Ehello%21%2F
quote     : http%3A//localhost%3A1080/%7Ehello%21/
quote_plus: http%3A%2F%2Flocalhost%3A1080%2F%7Ehello%21%2F
#+END_SRC

可以看到 =urlencode= 中应该是调用 =quote_plus= 来进行转义的

逆向操作则使用 =unquote= 或 =unquote_plus= 函数
#+BEGIN_SRC python
  from urllib.parse import unquote, unquote_plus

  encoded_url = 'http%3A%2F%2Flocalhost%3A1080%2F%7Ehello%21%2F'
  print(unquote(encoded_url))
  print(unquote_plus(encoded_url))
#+END_SRC

结果为:
#+BEGIN_SRC org
http://localhost:1080/~hello!/
http://localhost:1080/~hello!/
#+END_SRC

你会发现 =unquote= 函数居然能正确地将 =quote_plus= 的结果转换回来。
